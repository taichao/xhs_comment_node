var http = require( 'http' );
var qs = require( 'querystring' );
var host = require( '../config/host.config.json' );


var remoteFinished = true;
var remoteLimitTime = 10000;
var remoteReturnData = {};

var remoteUrlNum = 0;

function api( remoteUrl , remoteMethod , remoteData  , remoteHeaders , remoteReturn) {
	var remoteTimer; 

	var remoteData = qs.stringify(remoteData);

	if(!remoteMethod){
		remoteMethod = 'GET';
	}
	if(remoteMethod == 'GET'){
		if(remoteData){
			remoteUrl += (remoteUrl.indexOf('?')>0 ? '&' : '?') + remoteData;
			remoteData = '';
		}	
	}else{
		remoteHeaders['Content-Type'] =  'application/x-www-form-urlencoded';
	}
	remoteHeaders['Content-Length'] =  remoteData.length;

	var options = {
		hostname: host.host,
		port: host.port,  
		path: remoteUrl,  
		method: remoteMethod,
		headers:remoteHeaders 
	}

	console.log("host:%s -- url:%s -- method:%s -- port:%d" , host.host , remoteUrl , 'post' , host.port);

	var apiReq = http.request(options, function(remoteRes) {
		
		var dateTime = new Date;

		//clearTimeout(remoteTimer);

		var remoteState = remoteRes.statusCode;

		remoteRes.setEncoding('utf8');
		var data = '';
		remoteRes.on('data', function (chunk, err) {
			if( err ) {
				console.error( '请求数据失败' );
				return;
			}
			data += chunk;
		}).on('end' , function(){
			
			var runTime = new Date - dateTime;

			console.log("host:%s -- url:%s -- method:%s -- port:%d" , host.host , remoteUrl , 'post' , host.port);
			console.log('this api is runed %d ms' , runTime);

			//remoteReturnData = data;
			remoteReturn( remoteRes , data );
		});
	});

	apiReq.on('error', function(e){
		console.log("auth_user error: " + e.message);
	});
	/*
	remoteTimer = setTimeout(function(){
		apiReq.abort();
	} , remoteLimitTime);
	*/
	apiReq.write( remoteData );

	apiReq.end();
}

function remote( req , res , remoteUrls , remoteDatas , remoteReturn){

	var dateTime = new Date;

	if(!remoteDatas){
		remoteDatas = {};
	}
	

	for(var key in remoteUrls){
		var remoteUrl		= remoteUrls[key].url;
		var remoteHeaders	= req.headers;
		var remoteMethod	= remoteUrls[key].method;
		var remoteData		= {};
		if(remoteDatas[key] != undefined){
			remoteData = remoteDatas[key];
		}
		//remoteUrlNum = remoteUrls.length;
		//console.log(remoteUrlNum);
		api(remoteUrl , remoteMethod , remoteData , remoteHeaders , remoteReturn);
	}

	console.log('remote time %d ms' , new Date - dateTime);

	//console.log(remoteReturnData);

}


exports.remote = remote;
